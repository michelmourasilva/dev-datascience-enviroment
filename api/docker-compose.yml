version: '2.1'
services:
  web:
    build: .
    volumes:
      - './src/:/usr/src/app/'
    ports:
      - '8002:8000'
    environment:
    #  configuração pra o banco de homologação
    #  - DATABASE_HOST=10.0.12.129
    #  - DATABASE_PORT=5432
    #  - DATABASE_USER=integraH_app
    #  - DATABASE_PASSWORD=M8%40it%24fa
    #  - DATABASE_NAME=dbrenachH
    #  - DATABASE_SCHEMA=renach
    #  configuração pra o banco de desenvolvimento
    #  - DATABASE_HOST=10.0.12.129
    #  - DATABASE_PORT=5432
    #  - DATABASE_USER=integraD_app
    #  - DATABASE_PASSWORD=er%40thw11
    #  - DATABASE_NAME=dbintegraD
    #  - DATABASE_SCHEMA=renach
    #  configuração pra o banco local do conteiner
      - DATABASE_HOST=db
      - DATABASE_PORT=5432
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=postgres
      - DATABASE_NAME=postgres
      - DATABASE_SCHEMA=public
      - DATABASE_LOG=true
      - APM_SERVER_URL=apm-server
      - APM_SERVER_PORT=8200
      - APM_SERVICE_NAME=api
      - ELASTICSEARCH_HOSTS=elasticsearch
      - ELASTICSEARCH_PORT=9200
      - ENVIROMENT=PRD
      - SERVER_WORKER=4
      - SERVER_LOG=debug
      - SERVER_TIMEOUT=1000
    depends_on:
      - db
      - elasticsearch
      - kibana
      - apm-server
    networks:
      - elastic
  db:
    image: 'postgres:12.1-alpine'
    volumes:
      - 'postgres_data:/var/lib/postgresql/data/'
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    networks:
      - elastic
  elasticsearch:
    image: 'docker.elastic.co/elasticsearch/elasticsearch:7.11.1'
    ports:
      - '9200:9200'
    environment:
      - bootstrap.memory_lock=true
      - cluster.name=docker-cluster
      - cluster.routing.allocation.disk.threshold_enabled=false
      - discovery.type=single-node
      - 'ES_JAVA_OPTS=-XX:UseAVX=2 -Xms1g -Xmx1g'
    ulimits:
      memlock:
        hard: -1
        soft: -1
    volumes:
      - 'es_data:/usr/share/elasticsearch/data:rw'
    healthcheck:
      interval: 30s
      retries: 10
      test: 'curl -s http://localhost:9200/_cluster/health | grep -vq ''"status":"red"'''
    networks:
      - elastic
  kibana:
    image: 'docker.elastic.co/kibana/kibana:7.11.1'
    ports:
      - '5601:5601'
    environment:
      ELASTICSEARCH_URL: 'http://elasticsearch:9200'
      ELASTICSEARCH_HOSTS: 'http://elasticsearch:9200'
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      interval: 30s
      retries: 20
      test: 'curl --write-out ''HTTP %{http_code}'' --fail --silent --output /dev/null http://localhost:5601/api/status'
    networks:
      - elastic
  apm-server:
    image: 'docker.elastic.co/apm/apm-server:7.11.1'
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_healthy
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETGID
      - SETUID
    cap_drop:
      - ALL
    ports:
      - '8200:8200'
    networks:
      - elastic
    command: |
      apm-server -e
        -E apm-server.rum.enabled=true
        -E setup.kibana.host=kibana:5601
        -E setup.template.settings.index.number_of_replicas=0
        -E apm-server.kibana.enabled=true
        -E apm-server.kibana.host=kibana:5601
        -E output.elasticsearch.hosts=["elasticsearch:9200"]
    healthcheck:
      interval: 30s
      retries: 12
      test: 'curl --write-out ''HTTP %{http_code}'' --fail --silent --output /dev/null http://localhost:8200/'
volumes:
  postgres_data:
    driver: local
  es_data:
    driver: local
networks:
  elastic:
    driver: bridge
